# Blueprint metadata
blueprint:
  name: Controller - IKEA E1744 SYMFONISK Rotary Remote
  description: |
    Controller automation for executing any kind of action triggered by an IKEA E1744 SYMFONISK Rotary Remote. Allows to optionally loop a custom action during controller rotation.
    Supports deCONZ, ZHA, Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.

    Full documentation for this controller and list of available Hooks [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1744).
  source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/controllers/ikea_e1744/ikea_e1744.yaml
  domain: automation
  input:
    integration:
      name: Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - deCONZ
            - ZHA
            - Zigbee2MQTT
    controller_device:
      name: (deCONZ, ZHA) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA.
      default: ''
      selector:
        device:
    controller_entity:
      name: (Zigbee2MQTT) Controller Entity
      description: The action sensor of the controller to use for the automation. Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: sensor
    # inputs for custom actions
    action_rotate_left:
      name: (Optional) Rotate left
      description: Action to run on rotate left.
      default: []
      selector:
        action:
    action_rotate_left_stop:
      name: (Optional) Rotate left stop
      description: Action to run on when stopping to rotate left the remote.
      default: []
      selector:
        action:
    action_rotate_right:
      name: (Optional) Rotate right
      description: Action to run on rotate right.
      default: []
      selector:
        action:
    action_rotate_right_stop:
      name: (Optional) Rotate right stop
      description: Action to run on when stopping to rotate right the remote.
      default: []
      selector:
        action:
    action_click_short:
      name: (Optional) Remote - short press
      description: Action to run on short remote press.
      default: []
      selector:
        action:
    action_click_double:
      name: (Optional) Remote - double press
      description: Action to run on double remote press.
      default: []
      selector:
        action:
    action_click_triple:
      name: (Optional) Remote - triple press
      description: Action to run on triple remote press.
      default: []
      selector:
        action:
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    rotate_left_loop:
      name: (Optional) Rotate left - loop until stop
      description: Loop the rotate left action until the rotation is stopped.
      default: false
      selector:
        boolean:
    rotate_left_max_loop_repeats:
      name: (Optional) Rotate left - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    rotate_right_loop:
      name: (Optional) Rotate right - loop until stop
      description: Loop the rotate right action until the rotation is stopped.
      default: false
      selector:
        boolean:
    rotate_right_max_loop_repeats:
      name: (Optional) Rotate right - Maximum loop repeats
      description: >-
        Maximum number of repeats for the custom action, when looping is enabled.
        Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
      default: 500
      selector:
        number:
          min: 1
          max: 5000
          mode: slider
          step: 1
    rotate_loop_pause:
      name: (Optional) Rotation loop pause (ms)
      description: >-
        The amount of time in milliseconds to pause during each loop
      default: 200
      selector:
        number:
          min: 1
          max: 2000
          mode: slider
          step: 20

    # helpers used to properly recognize the remote button events
    helper_last_controller_event:
      name: Helper - State container (required)
      description: >-
        Important: You will need to add an input_text helper (see: /config/helpers) and then select it for this input.
        This helper will hold the state of the rotation
      default: ''
      selector:
        entity:
          domain: input_text
    helper_debounce_delay:
      name: (Optional) Helper - Debounce delay
      description: >-
        Delay used for debouncing RAW controller events, by default set to 0. A value of 0 disables the debouncing feature. Increase this value
        if you notice custom actions or linked Hooks running multiple times when interacting with the device. When the controller needs to be debounced, usually a value of 100 is enough to remove all duplicate events.
      default: 0
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: milliseconds
          mode: box
          step: 10
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  rotate_left_loop: !input rotate_left_loop
  rotate_left_max_loop_repeats: !input rotate_left_max_loop_repeats
  rotate_right_loop: !input rotate_right_loop
  rotate_right_max_loop_repeats: !input rotate_right_max_loop_repeats
  state_helper_var: !input helper_last_controller_event
  helper_debounce_delay: !input helper_debounce_delay
  # integration id used to select items in the action mapping
  integration_id: '{{ integration | lower }}'
  # mapping between actions and integrations
  actions_mapping:
    deconz:
      rotate_left: ['3001']
      rotate_stop: ['3003', '2003']
      rotate_right: ['2001']
      click_short: ['1002']
      click_double: ['1004']
      click_triple: ['1005']
    zha:
      rotate_left: [move_1_195]
      rotate_stop: [stop]
      rotate_right: [move_0_195]
      click_short: [toggle]
      click_double: [step_0_1_0]
      click_triple: [step_1_1_0]
    zigbee2mqtt:
      rotate_left: [brightness_move_down]
      rotate_stop: [brightness_stop]
      rotate_right: [brightness_move_up]
      click_short: [toggle]
      click_double: [brightness_step_up]
      click_triple: [brightness_step_down]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  rotate_left: '{{ actions_mapping[integration_id]["rotate_left"] }}'
  rotate_stop: '{{ actions_mapping[integration_id]["rotate_stop"] }}'
  rotate_right: '{{ actions_mapping[integration_id]["rotate_right"] }}'
  click_short: '{{ actions_mapping[integration_id]["click_short"] }}'
  click_double: '{{ actions_mapping[integration_id]["click_double"] }}'
  click_triple: '{{ actions_mapping[integration_id]["click_triple"] }}'
  # build data to send within a controller event
  controller_entity: !input controller_entity
  controller_device: !input controller_device
  controller_id: '{% if integration_id=="zigbee2mqtt" %}{{controller_entity}}{% else %}{{controller_device}}{% endif %}'
# mode restart ensures hold actions are interrupted when the corresponding release action is received
mode: restart
max_exceeded: silent
trigger:
  # trigger for zigbee2mqtt
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity
  # trigger for other integrations
  - platform: event
    event_type:
      - zha_event
      - deconz_event
    event_data:
      device_id: !input controller_device
condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.event.data.new_state.state }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
      # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
action:

  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.event.data.new_state.state }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
      trigger_delta: '{{ (as_timestamp(now()) - as_timestamp((states(state_helper_var) | from_json).last_triggered if state_helper_var is not none and (states(state_helper_var) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "1970-01-01 00:00:00")) * 1000 }}'
      last_controller_event: '{{ (states(state_helper_var) | from_json).trigger_action if state_helper_var is not none and (states(state_helper_var) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "" }}'
      state_helper_var: >
        {{
          (states(state_helper_var) | from_json)
            if state_helper_var is not none
              and (states(state_helper_var) | from_json).initialised == true
            else
              (
                {
                  "initialised": true,
                  "rotation": {
                    "rotate_left": {
                      "when": now()|string,
                      "active": false
                    },
                    "rotate_right": {
                      "when": now()|string,
                      "active": false
                    }
                  }
                } | to_json
              ) | from_json
        }}

      is_rotate_left: '{{ trigger_action | string in rotate_left }}'
      is_rotate_right: '{{ trigger_action | string in rotate_right }}'
      is_rotate_stop: '{{ trigger_action | string in rotate_stop }}'

      max_loop_repeats: '{{ rotate_left_max_loop_repeats if rotating_left else rotate_right_max_loop_repeats }}'
      is_already_rotating_left: '{{ state_helper_var.rotation.rotate_left.active }}'
      is_already_rotating_right: '{{ state_helper_var.rotation.rotate_right.active }}'
      is_already_rotating: '{{ is_already_rotating_left or is_already_rotating_right }}'


  # Set an initial value for the helper
  - service: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: '{{ state_helper_var | to_json}}'

  # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
  # therefore previous runs must wait for the debounce delay before executing any other action
  # if the delay expires and the automation is still running it means it's the last run and execution can continue

  - delay:
      milliseconds: !input helper_debounce_delay

  # choose the sequence to run based on the received button event
  - choose:


      # Rotate Start
      - conditions:
          # First determine if the trigger is a rotation related trigger
          - '{{ is_rotate_left or is_rotate_right }}'
          # ...then check the state helper var to assert that we are not already rotating in that direction
          - '{{ not is_already_rotating }}'
        sequence:
          - variables:
              # Update the state helper var to set rotation active = true for the current direction of rotation
              state_helper_var: >-
                {{
                  (
                    {
                      "initialised": true,
                      "rotation": {
                        "rotate_left": {
                          "when": now()|string if is_rotate_left else state_helper_var.rotation.rotate_left.when,
                          "active": is_rotate_left
                        },
                        "rotate_right": {
                          "when": now()|string if is_rotate_right else state_helper_var.rotation.rotate_right.when,
                          "active": is_rotate_right
                        }
                      }
                    } | to_json
                  ) | from_json
                }}
              is_already_rotating_left: '{{ state_helper_var.rotation.rotate_left.active }}'
              is_already_rotating_right: '{{ state_helper_var.rotation.rotate_right.active }}'
              is_already_rotating: '{{ is_already_rotating_left or is_already_rotating_right }}'


          # Update the value of the state helper text input
          - service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: '{{ state_helper_var | to_json }}'

          - repeat:
              # If we have started rotating in a direction and that direction has looping enabled
              # and if the repeat index is less than the max allowed loop count
              # or if the repeat index is 1 (only allows 1 iteration, i.e. no looping, just one execution)
              while: >
                {{
                  (
                    (
                      ( is_already_rotating_left and rotate_left_loop )
                      or
                      ( is_already_rotating_right and rotate_right_loop )
                    )
                    and
                    repeat.index < max_loop_repeats | int
                  )
                  or
                  repeat.index == 1
                }}
              sequence:
                - choose:
                  - conditions: '{{ is_rotate_left }}'
                    sequence:
                      - choose:
                        - conditions: []
                          sequence: !input action_rotate_left

                      - event: ahb_controller_event
                        event_data:
                          controller: '{{ controller_id }}'
                          action: rotate_left

                  - conditions: '{{ is_rotate_right }}'
                    sequence:
                      - choose:
                        - conditions: []
                          sequence: !input action_rotate_right

                      - event: ahb_controller_event
                        event_data:
                          controller: '{{ controller_id }}'
                          action: rotate_right

                - delay:
                    milliseconds: !input rotate_loop_pause

      # Rotate Stop
      - conditions:
          - '{{ is_rotate_stop }}'
          - '{{ is_already_rotating }}'
        sequence:
          - variables:
              state_helper_var: >-
                {{
                  (
                    {
                      "initialised": true,
                      "rotation": {
                        "rotate_left": {
                          "when": state_helper_var.rotation.rotate_left.when,
                          "active": state_helper_var.rotation.rotate_left.active if is_rotate_right else false
                        },
                        "rotate_right": {
                          "when": state_helper_var.rotation.rotate_right.when,
                          "active": state_helper_var.rotation.rotate_right.active if is_rotate_left else false
                        }
                      }
                    } | to_json
                  ) | from_json
                }}
          # Update the value of the state helper text input
          - service: input_text.set_value
            data:
              entity_id: !input helper_last_controller_event
              value: '{{ state_helper_var | to_json }}'

          - choose:
              - conditions: '{{ is_already_rotating_left }}'
                sequence:
                  - choose:
                    - conditions: []
                      sequence: !input action_rotate_left_stop

                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: rotate_left_stop

              - conditions: '{{ is_already_rotating_right }}'
                sequence:
                  - choose:
                    - conditions: []
                      sequence: !input action_rotate_right_stop

                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: rotate_right_stop

      - conditions: '{{ trigger_action | string in click_short }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: click_short
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_click_short
      - conditions: '{{ trigger_action | string in click_double }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: click_double
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_click_double
      - conditions: '{{ trigger_action | string in click_triple }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: click_triple
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_click_triple

