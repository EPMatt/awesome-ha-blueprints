# Blueprint metadata
blueprint:
  name: Controller - SONOFF SNZB-01 Wireless Switch
  description: |
    # Controller - SONOFF SNZB-01 Wireless Switch

    Controller automation for executing any kind of action triggered by the provided SONOFF SNZB-01 Wireless Switch.
    Supports deCONZ, ZHA, Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.
    See the list of [Hooks available for this controller](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/sonoff_snzb01#available-hooks) for additional details.

    ## More Info

    ℹ️ Version 2025.03.20
    📝 [Changelog](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/sonoff_snzb01/#changelog)
    📕 Full documentation regarding this blueprint is available [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/sonoff_snzb01).

    🚀 This blueprint is part of the **[Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project**. Please consider **[leaving a star on GitHub](https://github.com/EPMatt/awesome-ha-blueprints)**! 🌟

  source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/controllers/sonoff_snzb01/sonoff_snzb01.yaml
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  input:
    integration:
      name: (Required) Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - deCONZ
            - ZHA
            - Zigbee2MQTT
    controller_device:
      name: (deCONZ, ZHA, Zigbee2MQTT Required) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA, Zigbee2MQTT.
      default: ''
      selector:
        device:
          filter:
            # source: https://www.zigbee2mqtt.io/devices/SNZB-01.html#ewelink-snzb-01
            - integration: mqtt
              manufacturer: eWeLink
              model: Wireless button
            # For backwards compatability with z2m 1.x. model_id is added to end of model rather than a seperate attribute in z2m 2.x
            - integration: mqtt
              manufacturer: eWeLink
              model: Wireless button (SNZB-01)
            # source: https://github.com/dresden-elektronik/deconz-rest-plugin/wiki/Supported-Devices
            - integration: zha
              manufacturer: eWeLink
              model: WB01
            - integration: deconz
              manufacturer: eWeLink
              model: WB01
          multiple: false
    helper_last_controller_event:
      name: (Required) Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller. You will need to manually create a text input entity for this, please read the blueprint Additional Notes for more info.
      default: ''
      selector:
        entity:
          domain: input_text
    # inputs for custom actions
    action_button_short:
      name: (Optional) Button short press
      description: Action to run on short button press.
      default: []
      selector:
        action:
    action_button_long:
      name: (Optional) Button long press
      description: Action to run on long button press.
      default: []
      selector:
        action:
    action_button_double:
      name: (Optional) Button double press
      description: Action to run on double button press.
      default: []
      selector:
        action:
    # helpers used to properly recognize the remote button events
    helper_debounce_delay:
      name: (Optional) Helper - Debounce delay
      description:
        Delay used for debouncing RAW controller events, by default set to 0. A value of 0 disables the debouncing feature. Increase this value if you notice custom actions or linked Hooks running multiple times when interacting with the device. When the controller needs to be debounced,
        usually a value of 100 is enough to remove all duplicate events.
      default: 0
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: milliseconds
          mode: box
          step: 10
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  helper_last_controller_event: !input helper_last_controller_event
  helper_debounce_delay: !input helper_debounce_delay
  # integration id used to select items in the action mapping
  integration_id: '{{ integration | lower }}'
  # mapping between actions and integrations
  actions_mapping:
    deconz:
      button_short: ['1002']
      button_long: ['1001']
      button_double: ['1004']
    zha:
      button_short: [toggle]
      button_long: ['off']
      button_double: ['on']
    zigbee2mqtt:
      # source: https://www.zigbee2mqtt.io/devices/SNZB-01.html#ewelink-snzb-01
      button_short: [single]
      button_long: [long]
      button_double: [double]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_short: '{{ actions_mapping[integration_id]["button_short"] }}'
  button_long: '{{ actions_mapping[integration_id]["button_long"] }}'
  button_double: '{{ actions_mapping[integration_id]["button_double"] }}'
  # build data to send within a controller event
  controller_id: !input controller_device
mode: restart
max_exceeded: silent
triggers:
  # triggers for zigbee2mqtt mqtt device action
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: single
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: long
  - trigger: device
    domain: mqtt
    device_id: !input controller_device
    type: action
    subtype: double
  # triggers for other integrations
  - trigger: event
    event_type:
      - deconz_event
      - zha_event
    event_data:
      device_id: !input controller_device
conditions:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.payload }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action not in ["","None"] }}
actions:
  # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
  # therefore previous runs must wait for the debounce delay before executing any other action
  # if the delay expires and the automation is still running it means it's the last run and execution can continue
  - delay:
      milliseconds: !input helper_debounce_delay
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.payload }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
      trigger_delta: '{{ (as_timestamp(now()) - ((states(helper_last_controller_event) | from_json).t if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{((\"a\": \".*\"|\"t\": \d+\.\d+)(, )?){2}\}$")) else as_timestamp("1970-01-01 00:00:00"))) * 1000 }}'
  # update helper
  - action: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: '{{ {"a":trigger_action,"t":as_timestamp(now())} | to_json }}'
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string in button_short }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_short
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_short
      - conditions: '{{ trigger_action | string in button_long }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_long
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_long
      - conditions: '{{ trigger_action | string in button_double }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_double
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_double
