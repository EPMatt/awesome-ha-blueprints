# Blueprint metadata
blueprint:
  name: Controller - IKEA E1812 Shortcut button
  description: |
    Controller automation for executing any kind of action triggered by an IKEA E1812 Shortcut button. Allows to optionally loop an action on a button long press.
    Supports deCONZ, ZHA, Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.

    Full documentation for this controller and list of available Hooks [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1812).
  source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/controllers/ikea_e1812/ikea_e1812.yaml
  domain: automation
  input:
    integration:
      name: Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - deCONZ
            - ZHA
            - Zigbee2MQTT
    controller_device:
      name: (deCONZ, ZHA) Controller Device
      description: The controller device to use for the automation. Choose a value only if the remote is integrated with deCONZ, ZHA.
      default: ''
      selector:
        device:
    controller_entity:
      name: (Zigbee2MQTT) Controller Entity
      description: The action sensor of the controller to use for the automation. Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: sensor
    # inputs for custom actions
    action_button_short:
      name: (Optional) Button - short press
      description: Action to run on short button press.
      default: []
      selector:
        action:
    action_button_long:
      name: (Optional) Button - long press
      description: Action to run on long button press.
      default: []
      selector:
        action:
    action_button_release:
      name: (Optional) Button - release after long press
      description: Action to run on button release after a long press.
      default: []
      selector:
        action:
    action_button_double:
      name: (Optional) Button - double press
      description: Action to run on double button press.
      default: []
      selector:
        action:
    # inputs for looping custom actions on long button press events until the corresponding release event is received
    button_long_loop:
      name: Long button press - loop until release
      description: Loop the action until the button is released.
      default: false
      selector:
        boolean:
    # inputs for enabling double press events
    button_double_press:
      name: Expose button double press event
      description: Choose whether or not to expose the virtual double press event for the button. Turn this on if you are providing an action for the button double press event.
      default: false
      selector:
        boolean:
    # helpers used to properly recognize the remote button events
    helper_last_controller_event:
      name: (Double press action Required) Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller. See docs for more.
      default: ''
      selector:
        entity:
          domain: input_text
    helper_double_press_delay:
      name: (Optional) Helper - Double Press delay
      description: Max delay between the first and the second button press for the double press event. Provide a value only if you are using a double press action. Increase this value if you notice that the double press action is not triggered properly.
      default: 1000
      selector:
        number:
          min: 0
          max: 10000
          unit_of_measurement: milliseconds
          mode: box
# Automation schema
variables:
  # convert input tags to variables, to be used in templates
  integration: !input integration
  button_long_loop: !input button_long_loop
  button_double_press: !input button_double_press
  helper_last_controller_event: !input helper_last_controller_event
  # integration id used to select items in the action mapping
  integration_id: '{{ integration | lower }}'
  # mapping between actions and integrations
  actions_mapping:
    deconz:
      button_short: ['1002']
      button_long: ['1001']
      button_release: ['1003']
    zha:
      button_short: ['on']
      button_long: [move_with_on_off]
      button_release: [stop]
    zigbee2mqtt:
      button_short: ['on']
      button_long: [brightness_move_up]
      button_release: [brightness_stop]
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_short: '{{ actions_mapping[integration_id]["button_short"] }}'
  button_long: '{{ actions_mapping[integration_id]["button_long"] }}'
  button_release: '{{ actions_mapping[integration_id]["button_release"] }}'
  # build data to send within a controller event
  controller_entity: !input controller_entity
  controller_device: !input controller_device
  controller_id: '{% if integration_id=="zigbee2mqtt" %}{{controller_entity}}{% else %}{{controller_device}}{% endif %}'
# mode restart ensures hold actions are interrupted when the corresponding release action is received
mode: restart
max_exceeded: silent
trigger:
  # trigger for zigbee2mqtt
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity
  # trigger for other integrations
  - platform: event
    event_type:
      - zha_event
      - deconz_event
    event_data:
      device_id: !input controller_device
condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action -%}
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.event.data.new_state.state }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
        {%- endset -%}
        {{ trigger_action != "" }}
      # only for zigbee2mqtt, check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
action:
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: >-
        {%- if integration_id == "zigbee2mqtt" -%}
        {{ trigger.event.data.new_state.state }}
        {%- elif integration_id == "deconz" -%}
        {{ trigger.event.data.event }}
        {%- elif integration_id == "zha" -%}
        {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length > 0}}{{ trigger.event.data.args|join("_") }}
        {%- endif -%}
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action in button_short }}'
        sequence:
          - choose:
              # if double press event is enabled
              - conditions: '{{ button_double_press }}'
                sequence:
                  - choose:
                      # if previous event was a short press
                      - conditions: '{{ states(helper_last_controller_event) in button_short }}'
                        sequence:
                          # reset the text helper
                          - service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: ''
                          # run the double press action
                          # fire the event
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_double
                          # run the custom action
                          - choose:
                            default: !input action_button_double
                    # previous event was not a short press
                    default:
                      # register the short press event
                      - service: input_text.set_value
                        data:
                          entity_id: !input helper_last_controller_event
                          value: '{{ trigger_action }}'
                      # wait for a double press event to occur
                      # if another button event is fired, the automation get restarted and this sequence gets interrupted
                      - delay:
                          milliseconds: !input helper_double_press_delay
                      # if the delay expired, no double press was received, and the short press action can be executed
                      # reset the text helper
                      - service: input_text.set_value
                        data:
                          entity_id: !input helper_last_controller_event
                          value: ''
                      # run the short press action
                      # fire the event
                      - event: ahb_controller_event
                        event_data:
                          controller: '{{ controller_id }}'
                          action: button_short
                      # run the custom action
                      - choose:
                        default: !input action_button_short
            # if double press event is disabled run the action for the single short press
            default:
              # fire the event
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_short
              # run the custom action
              - choose:
                default: !input action_button_short
      - conditions: '{{ trigger_action in button_long }}'
        sequence:
          # fire the event only once before looping the action
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_long
          # if looping is enabled, loop the action indefinitely
          # repeat until the automation is restarted ie. when the corresponding release message is received
          - repeat:
              sequence: !input action_button_long
              until: '{{ not button_long_loop }}'
      - conditions: '{{ trigger_action in button_release }}'
        sequence:
          # fire the event
          - event: ahb_controller_event
            event_data:
              controller: '{{ controller_id }}'
              action: button_release
          # run the custom action
          - choose:
            default: !input action_button_release
