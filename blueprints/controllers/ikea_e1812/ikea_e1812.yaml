# Blueprint metadata
blueprint:
  name: Controller - IKEA E1812 Shortcut button
  description: |
    Controller automation for executing any kind of action triggered by an IKEA E1812 Shortcut button. Allows to optionally loop an action on a button long press.
    Supports deCONZ, ZHA, Zigbee2MQTT.

    Automations created with this blueprint can be connected with one or more [Hooks](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks) supported by this controller.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.

    Full documentation for this controller and list of available Hooks [here](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers/ikea_e1812).
source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/controllers/ikea_e1812/ikea_e1812.yaml
  domain: automation
  input:
    integration:
      name: Integration
      description: Integration used for connecting the remote with Home Assistant. Select one of the available values.
      selector:
        select:
          options:
            - deCONZ
            - ZHA
            - Zigbee2MQTT
    controller_device:
      name: (deCONZ, ZHA) Controller Device
      description: The controller device to use for the automation. Choose a value
        only if the remote is integrated with deCONZ, ZHA.
      default: ''
      selector:
        device: {}
    controller_entity:
      name: (Zigbee2MQTT) Controller Entity
      description: The action sensor of the controller to use for the automation.
        Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: sensor
    action_button_short:
      name: (Optional) Button - short press
      description: Action to run on short button press.
      default: []
      selector:
        action:
    action_button_long:
      name: (Optional) Button - long press
      description: Action to run on long button press.
      default: []
      selector:
        action:
    action_button_release:
      name: (Optional) Button - release after long press
      description: Action to run on button release after a long press.
      default: []
      selector:
        action:
    action_button_double:
      name: (Optional) Button - double press
      description: Action to run on double button press.
      default: []
      selector:
        action:
    button_long_loop:
      name: Long button press - loop until release
      description: Loop the action until the button is released.
      default: false
      selector:
        boolean:
    button_long_max_loops:
      name: Long Button press - Maximum loops
      description: Maximum amount of repeats.
      default: 500
      selector:
        number:
          min: 0
          max: 5000
          mode: slider
          step: 1
    button_double_press:
      name: Expose button double press event
      description: Choose whether or not to expose the virtual double press event for the button. Turn this on if you are providing an action for the button double press event.
      default: false
      selector:
        boolean:
    button_double_initial_press:
      name: Run short press action at once.
      description: Choose whether or not to run the short press action at once, without waiting for the 2nd press.
        When a second press is received the double press action will be run at once and the short press action will stop if it's still running.
      default: false
      selector:
        boolean:
    #Only requiered since it seems impossible to get the automations attribute dynamicly via a blueprint. 
    helper_last_controller_event:
      name: (Requieded to counter double triggers) Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller.
        See docs for more.
      default: ''
      selector:
        entity:
          domain: input_text            
    double_press_delay:
      name: (Optional) Helper - Double Press delay
      description: Max delay between the first and the second button press for the
        double press event. Provide a value only if you are using a double press action.
        Increase this value if you notice that the double press action is not triggered
        properly.
      default: 500
      selector:
        number:
          min: 400.0
          max: 5000.0
          unit_of_measurement: milliseconds
          mode: slider
          step: 10.0
    debounce_delay:
      name: Helper - Debounce delay
      description: Delay used for debouncing RAW controller events, when the device
        is connected with an integration which needs debounce. Increase this value
        only if the device is integrated with deCONZ, ZHA and you notice duplicate
        action runs.
      default: 200
      selector:
        number:
          min: 0.0
          max: 1000.0
          unit_of_measurement: milliseconds
          mode: slider
          step: 10.0
variables:
  integration: !input 'integration'
  button_long_loop: !input 'button_long_loop'
  button_long_max_loops: !input 'button_long_max_loops'
  button_double_press: !input 'button_double_press'
  button_double_initial_press: !input 'button_double_initial_press'
  action_button_long: !input 'action_button_long'
  helper_last_controller_event: !input 'helper_last_controller_event'
  double_press_delay: !input 'double_press_delay'
  debounce_delay: !input 'debounce_delay'
  # Subtracted debounce delay so that the timeout is really as set in double press delay but never go below minimum delay.
  adjusted_double_press_delay: '{% if double_press_delay - debounce_delay < 100 %}100{% else %}
                                {{ (double_press_delay - debounce_delay) | int }} {% endif %}'
  integration_id: '{{ integration | lower }}'
  actions_mapping:
    deconz:
      button_short:
      - 1002
      button_long:
      - 1001
      button_release:
      - 1003
    zha:
      button_short:
      - 'on'
      button_long:
      - move_with_on_off
      button_release:
      - stop
    zigbee2mqtt:
      button_short:
      - 'on'
      button_long:
      - brightness_move_up
      button_release:
      - brightness_stop
  button_short: '{{ actions_mapping[integration_id]["button_short"] }}'
  button_long: '{{ actions_mapping[integration_id]["button_long"] }}'
  button_release: '{{ actions_mapping[integration_id]["button_release"] }}'
  integrations_with_debounce:
  - deconz
  - zha
  controller_entity: !input 'controller_entity'
  controller_device: !input 'controller_device'
  controller_id: '{% if integration_id=="zigbee2mqtt" %}{{controller_entity}}{% else
    %}{{controller_device}}{% endif %}'
mode: restart
max_exceeded: silent
trigger:
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input 'controller_entity'
- platform: event
  event_type:
  - zha_event
  - deconz_event
  event_data:
    device_id: !input 'controller_device'
condition:
- condition: and
  conditions:
  - '{%- set trigger_action -%}
      {%- if integration_id == "zigbee2mqtt" -%} {{ trigger.event.data.new_state.state }}
      {%- elif integration_id == "deconz" -%} {{ trigger.event.data.event }}
      {%- elif integration_id == "zha" -%} {{ trigger.event.data.command }}
      {%- endif -%}
    {%- endset -%}
    {{ trigger_action != "" }}'
  - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
    # Stop if trigger happend within the defined in the debounce_delay input.
    # Also stop if trigger happend within the defined double_press_delay, when double press is enabled.
  - '{%- set trigger_delta -%}
      {{ ((as_timestamp(now()) - as_timestamp((states(helper_last_controller_event) | 
      default("{\"last_triggered\":\"1970-01-01 01:11:06\"}",true) | from_json).last_triggered)) * 1000) | int }}
    {%- endset -%}
    {%- if button_double_press -%}
        {{ integration_id not in integrations_with_debounce or trigger_delta | int > double_press_delay | int }}
    {%- else -%}
        {{ integration_id not in integrations_with_debounce or trigger_delta | int > debounce_delay | int }}
    {%- endif -%}'
action:
- variables:
    trigger_action: '{%- if integration_id == "zigbee2mqtt" -%} {{ trigger.event.data.new_state.state
      }} {%- elif integration_id == "deconz" -%} {{ trigger.event.data.event }} {%-
      elif integration_id == "zha" -%} {{ trigger.event.data.command }}
      {%- endif -%}'
    trigger_delta: '{{ ((as_timestamp(now()) - as_timestamp((states(helper_last_controller_event) | 
      default("{\"last_triggered\":\"1970-01-01 01:11:06\"}",true) | from_json).last_triggered)) * 1000) | int }}'
    processing_time: '{%- if trigger.event.time_fired -%}
                        {{ ((as_timestamp(now()) - as_timestamp(trigger.event.time_fired )) * 1000) | int }}
                      {%- else -%}
                        {{ as_timestamp("1970-01-01 01:11:06") }}
                      {%- endif -%}' 
- choose:
  - conditions: '{{ trigger_action in button_short }}'
    sequence:
    - choose:
      # Only run if double press is enabled
      - conditions: '{{ button_double_press }}'
        sequence:
            - service: input_text.set_value
              data:
                entity_id: !input helper_last_controller_event
                value: "{{ {\"trigger_action\":\"button_short\",\"trigger_delta\":trigger_delta,\"processing_time\": processing_time,\"last_triggered\":now()|string} | to_json }}"
            - choose:
              - conditions: '{{ button_double_initial_press }}'
                sequence:
                - event: ahb_controller_event
                  event_data:
                    controller: '{{ controller_id }}'
                    action: button_short
                - choose:
                  - conditions: []
                    sequence: !input 'action_button_short'
              # Delay to prevent double (or more) repeats of events on 1 button press to execute more then once. 
            - delay:
                milliseconds: '{{ debounce_delay }}'
              # Use wait for trigger instead of delay, so that when the 2nd buttonpress happens the action is executed at once.
              # Also this makes that we don't have to restart the automation and can use single mode
            - wait_for_trigger:
              - platform: event
                event_type: state_changed
                event_data:
                  entity_id: !input 'controller_entity'
              - platform: event
                event_type:
                  - zha_event
                  - deconz_event
                event_data:
                  device_id: !input 'controller_device'
              timeout:
                milliseconds: '{{ adjusted_double_press_delay }}'
            - choose:
                # Execute if wait for trigger is cought.
              - conditions: '{{ wait.trigger and not "none" in wait.trigger }}'
                sequence:
                - service: input_text.set_value
                  data:
                    entity_id: !input helper_last_controller_event
                    value: "{{ {\"trigger_action\":\"button_double\",\"trigger_delta\":trigger_delta,
                                \"double_press_delta\": ((as_timestamp(now()) - as_timestamp((states(helper_last_controller_event) | from_json).last_triggered)) * 1000) | int,
                                \"processing_time\": processing_time,\"last_triggered\":now()|string} | to_json }}"
                - event: ahb_controller_event
                  event_data:
                    controller: '{{ controller_id }}'
                    action: button_double
                - choose:
                  - conditions: []
                    sequence: !input 'action_button_double'
                #Execute after timeout when action on initial butten press is also disabled.
              - conditions: '{{ not wait.trigger and not button_double_initial_press }}'
                sequence:
                - event: ahb_controller_event
                  event_data:
                    controller: '{{ controller_id }}'
                    action: button_short
                - choose:
                  - conditions: []
                    sequence: !input 'action_button_short'

      #Run when double press is disabled
      default:
      - service: input_text.set_value
        data:
          entity_id: !input helper_last_controller_event
          value: "{{ {\"trigger_action\":\"button_short\",\"trigger_delta\":trigger_delta,\"processing_time\": processing_time,\"last_triggered\":now()|string} | to_json }}"
      - event: ahb_controller_event
        event_data:
          controller: '{{ controller_id }}'
          action: button_short
      - choose:
        - conditions: []
          sequence: !input 'action_button_short'
 
    # Make sure that not triggered when button is already hold down (prevent processing multiple events)
  - conditions: '{{ trigger_action in button_long and ("button_long" not in states(helper_last_controller_event) or trigger_delta > 1000) }}'
    sequence:
    - service: input_text.set_value
      data:
        entity_id: !input helper_last_controller_event
        value: "{{ {\"trigger_action\":\"button_long\",\"trigger_delta\":trigger_delta,\"processing_time\": processing_time,\"last_triggered\":now()|string} | to_json }}"
    - event: ahb_controller_event
      event_data:
        controller: '{{ controller_id }}'
        action: button_long
    - choose:
      - conditions: '{{ not button_long_loop }}'
        sequence: !input 'action_button_long'
      - conditions: '{{ button_long_loop }}' 
        sequence:
        - repeat: 
            sequence: !input 'action_button_long'
            while: '{{ repeat.index < button_long_max_loops }}'

  - conditions: '{{ trigger_action in button_release }}'
    sequence:
    - service: input_text.set_value
      data:
        entity_id: !input helper_last_controller_event
        value: "{{ {\"trigger_action\":\"button_release\",\"trigger_delta\":trigger_delta,\"processing_time\": processing_time,\"last_triggered\":now()|string} | to_json }}"
    - event: ahb_controller_event
      event_data:
        controller: '{{ controller_id }}'
        action: button_release
    - choose:
      - conditions: []
        sequence: !input 'action_button_release'
